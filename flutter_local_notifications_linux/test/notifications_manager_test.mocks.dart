// Mocks generated by Mockito 5.4.0 from annotations
// in flutter_local_notifications_linux/test/notifications_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_local_notifications_linux/src/notification_info.dart'
    as _i5;
import 'package:flutter_local_notifications_linux/src/platform_info.dart'
    as _i2;
import 'package:flutter_local_notifications_linux/src/storage.dart' as _i4;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:xdg_desktop_portal/xdg_desktop_portal.dart' as _i8;

import 'notifications_manager_test.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLinuxPlatformInfoData_0 extends _i1.SmartFake
    implements _i2.LinuxPlatformInfoData {
  _FakeLinuxPlatformInfoData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LinuxPlatformInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockLinuxPlatformInfo extends _i1.Mock implements _i2.LinuxPlatformInfo {
  @override
  _i3.Future<_i2.LinuxPlatformInfoData> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i3.Future<_i2.LinuxPlatformInfoData>.value(
            _FakeLinuxPlatformInfoData_0(
          this,
          Invocation.method(
            #getAll,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.LinuxPlatformInfoData>.value(
            _FakeLinuxPlatformInfoData_0(
          this,
          Invocation.method(
            #getAll,
            [],
          ),
        )),
      ) as _i3.Future<_i2.LinuxPlatformInfoData>);
}

/// A class which mocks [NotificationStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationStorage extends _i1.Mock
    implements _i4.NotificationStorage {
  @override
  _i3.Future<List<_i5.LinuxNotificationInfo>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i3.Future<List<_i5.LinuxNotificationInfo>>.value(
            <_i5.LinuxNotificationInfo>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.LinuxNotificationInfo>>.value(
                <_i5.LinuxNotificationInfo>[]),
      ) as _i3.Future<List<_i5.LinuxNotificationInfo>>);
  @override
  _i3.Future<_i5.LinuxNotificationInfo?> getById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i3.Future<_i5.LinuxNotificationInfo?>.value(),
        returnValueForMissingStub:
            _i3.Future<_i5.LinuxNotificationInfo?>.value(),
      ) as _i3.Future<_i5.LinuxNotificationInfo?>);
  @override
  _i3.Future<bool> insert(_i5.LinuxNotificationInfo? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [notification],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> removeById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #removeById,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> removeByIdList(List<int>? idList) => (super.noSuchMethod(
        Invocation.method(
          #removeByIdList,
          [idList],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<void> forceReloadCache() => (super.noSuchMethod(
        Invocation.method(
          #forceReloadCache,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [DidReceiveNotificationResponseCallback].
///
/// See the documentation for Mockito's code generation for more information.
class MockDidReceiveNotificationResponseCallback extends _i1.Mock
    implements _i6.DidReceiveNotificationResponseCallback {
  @override
  _i3.Future<dynamic> call(_i7.NotificationResponse? notificationResponse) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [notificationResponse],
        ),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
}

/// A class which mocks [XdgNotificationPortal].
///
/// See the documentation for Mockito's code generation for more information.
class MockXdgNotificationPortal extends _i1.Mock
    implements _i8.XdgNotificationPortal {
  @override
  _i3.Stream<_i8.XdgNotificationActionInvokedEvent> get actionInvoked =>
      (super.noSuchMethod(
        Invocation.getter(#actionInvoked),
        returnValue: _i3.Stream<_i8.XdgNotificationActionInvokedEvent>.empty(),
        returnValueForMissingStub:
            _i3.Stream<_i8.XdgNotificationActionInvokedEvent>.empty(),
      ) as _i3.Stream<_i8.XdgNotificationActionInvokedEvent>);
  @override
  _i3.Future<int> getVersion() => (super.noSuchMethod(
        Invocation.method(
          #getVersion,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<void> addNotification(
    String? id, {
    String? title,
    String? body,
    _i8.XdgNotificationIcon? icon,
    _i8.XdgNotificationPriority? priority,
    String? defaultAction,
    List<_i8.XdgNotificationButton>? buttons = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNotification,
          [id],
          {
            #title: title,
            #body: body,
            #icon: icon,
            #priority: priority,
            #defaultAction: defaultAction,
            #buttons: buttons,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> removeNotification(String? id) => (super.noSuchMethod(
        Invocation.method(
          #removeNotification,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
